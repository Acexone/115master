---
description: 
globs: src/**/*.vue
alwaysApply: false
---
# Vue 代码规范和最佳实践

## 文件结构

1. 以 `Template -> Script -> Style` 的顺序编写文件
2. 使用 `<script setup lang="ts">` 语法
3. 使用 `<style module>` 语法
4. 在 template 中使用 `:class="$style['class-name']"` 语法

## 组件拆分

1. 复杂 Composition API 逻辑拆分到同级 `hooks` 目录
2. 子组件拆分到同级 `components` 目录
3. 工具函数拆分到同级 `utils` 目录
4. 类型定义拆分到同级 `types` 目录

## Tailwind 类名抽象

在 Vue 组件中，将 Tailwind 类名抽象为有语义的 TypeScript 变量，提高代码可维护性和复用性。

### 实现方式

1. 在组件的 `<script setup>` 部分创建 `styles` 对象，按功能组织样式
2. 为每个样式块使用有描述性的名称（如 container、section、table 等）
3. 在模板中使用 `:class` 绑定替代直接使用 `class` 属性
4. 对于条件类，使用数组语法 `[:class="[baseClass, condition ? activeClass : '']]"`

### 示例

```typescript
// 样式常量定义
const styles = {
  // 容器样式
  container: {
    main: "bg-base-100 h-full rounded-xl flex flex-col",
    header: "flex justify-between items-center px-4 py-2 bg-base-200 rounded-t-xl",
    content: "overflow-y-auto flex-1"
  },
  // 章节样式
  section: {
    title: "sticky top-0 z-10 bg-base-100 py-2 px-6 text-base font-medium",
    content: "px-6 pt-2"
  },
  // 表格样式
  table: {
    wrapper: "w-full",
    fixedLayout: "table-fixed",
    labelCell: "text-base-content py-1 w-1/3 align-top",
    valueCell: "text-base-content/60 py-1 text-right"
  }
};
```

```html
<template>
  <div :class="styles.container.main">
    <h4 :class="styles.section.title">标题</h4>
    <div :class="styles.section.content">
      <table :class="[styles.table.wrapper, styles.table.fixedLayout]">
        <!-- 表格内容 -->
      </table>
    </div>
  </div>
</template>
```

## TypeScript 规范

1. 使用 `type` 定义类型（非特殊情况）
2. 非特殊情况，不使用 `any` 和 `unknown`
3. 合理使用泛型定义
4. 使用接口和类型来定义组件 props

```typescript
type ComponentProps = {
  title: string;
  isLoading?: boolean;
  items: Array<ItemType>;
};

// 组件定义
const props = defineProps<ComponentProps>();
```

## 响应式和性能优化

1. 使用 `computed` 处理衍生状态，避免在模板中使用复杂表达式
2. 使用 `watchEffect` 而非 `watch` 处理简单的副作用
3. 使用 `shallowRef` 处理大型对象，减少不必要的深度监听
4. 合理使用 `v-memo` 减少不必要的模板更新

```typescript
// ✅ 正确的响应式使用
const count = ref(0);
const doubledCount = computed(() => count.value * 2);

// ✅ 正确的副作用处理
watchEffect(() => {
  console.log(`Count changed to: ${count.value}`);
});
```

## UI 风格

1. 保持现代化、简洁、美观和优雅的设计
2. 使用 DaisyUI 组件保持一致的设计语言
3. 避免硬编码颜色值，使用 Tailwind 的主题变量
4. 确保界面在不同设备上的响应性
